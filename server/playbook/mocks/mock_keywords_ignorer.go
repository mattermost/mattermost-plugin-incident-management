// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-incident-collaboration/server/playbook (interfaces: KeywordsIgnorer)

// Package mock_playbook is a generated GoMock package.
package mock_playbook

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeywordsIgnorer is a mock of KeywordsIgnorer interface
type MockKeywordsIgnorer struct {
	ctrl     *gomock.Controller
	recorder *MockKeywordsIgnorerMockRecorder
}

// MockKeywordsIgnorerMockRecorder is the mock recorder for MockKeywordsIgnorer
type MockKeywordsIgnorerMockRecorder struct {
	mock *MockKeywordsIgnorer
}

// NewMockKeywordsIgnorer creates a new mock instance
func NewMockKeywordsIgnorer(ctrl *gomock.Controller) *MockKeywordsIgnorer {
	mock := &MockKeywordsIgnorer{ctrl: ctrl}
	mock.recorder = &MockKeywordsIgnorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeywordsIgnorer) EXPECT() *MockKeywordsIgnorerMockRecorder {
	return m.recorder
}

// Ignore mocks base method
func (m *MockKeywordsIgnorer) Ignore(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ignore", arg0, arg1)
}

// Ignore indicates an expected call of Ignore
func (mr *MockKeywordsIgnorerMockRecorder) Ignore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockKeywordsIgnorer)(nil).Ignore), arg0, arg1)
}

// IsIgnored mocks base method
func (m *MockKeywordsIgnorer) IsIgnored(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIgnored", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIgnored indicates an expected call of IsIgnored
func (mr *MockKeywordsIgnorerMockRecorder) IsIgnored(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIgnored", reflect.TypeOf((*MockKeywordsIgnorer)(nil).IsIgnored), arg0, arg1)
}
