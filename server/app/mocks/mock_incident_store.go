// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-incident-collaboration/server/app (interfaces: IncidentStore)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/mattermost/mattermost-plugin-incident-collaboration/server/app"
	reflect "reflect"
	time "time"
)

// MockIncidentStore is a mock of IncidentStore interface
type MockIncidentStore struct {
	ctrl     *gomock.Controller
	recorder *MockIncidentStoreMockRecorder
}

// MockIncidentStoreMockRecorder is the mock recorder for MockIncidentStore
type MockIncidentStoreMockRecorder struct {
	mock *MockIncidentStore
}

// NewMockIncidentStore creates a new mock instance
func NewMockIncidentStore(ctrl *gomock.Controller) *MockIncidentStore {
	mock := &MockIncidentStore{ctrl: ctrl}
	mock.recorder = &MockIncidentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIncidentStore) EXPECT() *MockIncidentStoreMockRecorder {
	return m.recorder
}

// ChangeCreationDate mocks base method
func (m *MockIncidentStore) ChangeCreationDate(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCreationDate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCreationDate indicates an expected call of ChangeCreationDate
func (mr *MockIncidentStoreMockRecorder) ChangeCreationDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCreationDate", reflect.TypeOf((*MockIncidentStore)(nil).ChangeCreationDate), arg0, arg1)
}

// CreateIncident mocks base method
func (m *MockIncidentStore) CreateIncident(arg0 *app.Incident) (*app.Incident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncident", arg0)
	ret0, _ := ret[0].(*app.Incident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncident indicates an expected call of CreateIncident
func (mr *MockIncidentStoreMockRecorder) CreateIncident(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncident", reflect.TypeOf((*MockIncidentStore)(nil).CreateIncident), arg0)
}

// CreateTimelineEvent mocks base method
func (m *MockIncidentStore) CreateTimelineEvent(arg0 *app.TimelineEvent) (*app.TimelineEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimelineEvent", arg0)
	ret0, _ := ret[0].(*app.TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimelineEvent indicates an expected call of CreateTimelineEvent
func (mr *MockIncidentStoreMockRecorder) CreateTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimelineEvent", reflect.TypeOf((*MockIncidentStore)(nil).CreateTimelineEvent), arg0)
}

// GetAllIncidentMembersCount mocks base method
func (m *MockIncidentStore) GetAllIncidentMembersCount(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIncidentMembersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIncidentMembersCount indicates an expected call of GetAllIncidentMembersCount
func (mr *MockIncidentStoreMockRecorder) GetAllIncidentMembersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIncidentMembersCount", reflect.TypeOf((*MockIncidentStore)(nil).GetAllIncidentMembersCount), arg0)
}

// GetIncident mocks base method
func (m *MockIncidentStore) GetIncident(arg0 string) (*app.Incident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncident", arg0)
	ret0, _ := ret[0].(*app.Incident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncident indicates an expected call of GetIncident
func (mr *MockIncidentStoreMockRecorder) GetIncident(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncident", reflect.TypeOf((*MockIncidentStore)(nil).GetIncident), arg0)
}

// GetIncidentIDForChannel mocks base method
func (m *MockIncidentStore) GetIncidentIDForChannel(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentIDForChannel", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentIDForChannel indicates an expected call of GetIncidentIDForChannel
func (mr *MockIncidentStoreMockRecorder) GetIncidentIDForChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentIDForChannel", reflect.TypeOf((*MockIncidentStore)(nil).GetIncidentIDForChannel), arg0)
}

// GetIncidents mocks base method
func (m *MockIncidentStore) GetIncidents(arg0 app.RequesterInfo, arg1 app.IncidentFilterOptions) (*app.GetIncidentsResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidents", arg0, arg1)
	ret0, _ := ret[0].(*app.GetIncidentsResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidents indicates an expected call of GetIncidents
func (mr *MockIncidentStoreMockRecorder) GetIncidents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidents", reflect.TypeOf((*MockIncidentStore)(nil).GetIncidents), arg0, arg1)
}

// GetOwners mocks base method
func (m *MockIncidentStore) GetOwners(arg0 app.RequesterInfo, arg1 app.IncidentFilterOptions) ([]app.OwnerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwners", arg0, arg1)
	ret0, _ := ret[0].([]app.OwnerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwners indicates an expected call of GetOwners
func (mr *MockIncidentStoreMockRecorder) GetOwners(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwners", reflect.TypeOf((*MockIncidentStore)(nil).GetOwners), arg0, arg1)
}

// GetTimelineEvent mocks base method
func (m *MockIncidentStore) GetTimelineEvent(arg0, arg1 string) (*app.TimelineEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelineEvent", arg0, arg1)
	ret0, _ := ret[0].(*app.TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelineEvent indicates an expected call of GetTimelineEvent
func (mr *MockIncidentStoreMockRecorder) GetTimelineEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelineEvent", reflect.TypeOf((*MockIncidentStore)(nil).GetTimelineEvent), arg0, arg1)
}

// HasViewedChannel mocks base method
func (m *MockIncidentStore) HasViewedChannel(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasViewedChannel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasViewedChannel indicates an expected call of HasViewedChannel
func (mr *MockIncidentStoreMockRecorder) HasViewedChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasViewedChannel", reflect.TypeOf((*MockIncidentStore)(nil).HasViewedChannel), arg0, arg1)
}

// NukeDB mocks base method
func (m *MockIncidentStore) NukeDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NukeDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// NukeDB indicates an expected call of NukeDB
func (mr *MockIncidentStoreMockRecorder) NukeDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NukeDB", reflect.TypeOf((*MockIncidentStore)(nil).NukeDB))
}

// SetViewedChannel mocks base method
func (m *MockIncidentStore) SetViewedChannel(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetViewedChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetViewedChannel indicates an expected call of SetViewedChannel
func (mr *MockIncidentStoreMockRecorder) SetViewedChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetViewedChannel", reflect.TypeOf((*MockIncidentStore)(nil).SetViewedChannel), arg0, arg1)
}

// UpdateIncident mocks base method
func (m *MockIncidentStore) UpdateIncident(arg0 *app.Incident) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncident", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIncident indicates an expected call of UpdateIncident
func (mr *MockIncidentStoreMockRecorder) UpdateIncident(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncident", reflect.TypeOf((*MockIncidentStore)(nil).UpdateIncident), arg0)
}

// UpdateStatus mocks base method
func (m *MockIncidentStore) UpdateStatus(arg0 *app.SQLStatusPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockIncidentStoreMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIncidentStore)(nil).UpdateStatus), arg0)
}

// UpdateTimelineEvent mocks base method
func (m *MockIncidentStore) UpdateTimelineEvent(arg0 *app.TimelineEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimelineEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimelineEvent indicates an expected call of UpdateTimelineEvent
func (mr *MockIncidentStoreMockRecorder) UpdateTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimelineEvent", reflect.TypeOf((*MockIncidentStore)(nil).UpdateTimelineEvent), arg0)
}
